{
	"info": {
		"_postman_id": "40dee167-3899-485d-a61c-2f7e78f87e0e",
		"name": "Resources",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "34735841-40dee167-3899-485d-a61c-2f7e78f87e0e"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "login with valid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df2b39c4-5dc8-4959-b8a3-827dc41c2a24",
								"exec": [
									"pm.environment.set(\"baseUrl\", \"https://dummyjson.com\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "baa53dec-4d3d-4816-b632-cd923632122d",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"    pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"Successful login\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.accessToken).to.not.be.null; ",
									"    pm.expect(responseBody.refreshToken).to.not.be.null",
									"    pm.expect(responseBody.username).to.eq('emmaj')",
									"    })",
									"",
									"",
									"pm.test(\"Save access token and expiry time\", function () {",
									"    const responseJson = pm.response.json();",
									"    const accessToken = responseJson.accessToken; ",
									"    const expiresIn = 900; // Replace with your token's expiry time in seconds (e.g., 1 hour = 3600s)",
									"    const expiryTime = Date.now() + (expiresIn * 1000); // Calculate expiry time in milliseconds",
									"",
									"    // Save the access token and expiry time in environment variables",
									"    pm.environment.set(\"accessToken\", accessToken);",
									"    pm.environment.set(\"tokenExpiry\", expiryTime);",
									"",
									"    pm.expect(accessToken).to.not.be.null; // Optional assertion to ensure the token is valid",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9a89b936-226c-445b-8632-13ddd204696a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"emmaj\",\n    \"password\": \"emmajpass\",\n    \"expiresInMins\": 15 // optional, defaults to 60\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "attempting to login with no credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9637671d-f13f-4c80-82b5-d9c230d6ce52",
								"exec": [
									"pm.environment.set(\"baseUrl\", \"https://dummyjson.com\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f623087-c143-468c-bb69-c0696178d2a5",
								"exec": [
									"pm.test(\"Status code is 400\", function(){",
									"    pm.response.to.have.status(400)",
									"    pm.response.to.have.status(\"Bad Request\")",
									"})",
									"",
									"pm.test(\"Login with no credentials\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.message).to.eq('Username and password required')",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f249a810-041f-4df6-805c-2b2f1694cde5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"\",\n    \"expiresInMins\": 60 // optional, defaults to 60\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "attempting to login with no username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00266439-e50c-4b4c-bc87-ff3abb4e1f90",
								"exec": [
									"pm.environment.set(\"baseUrl\", \"https://dummyjson.com\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8522dd3-6525-4324-8e96-e49efb90df4f",
								"exec": [
									"pm.test(\"Status code is 400\", function(){",
									"    pm.response.to.have.status(400)",
									"    pm.response.to.have.status(\"Bad Request\")",
									"})",
									"",
									"pm.test(\"Login with no username\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.message).to.eq('Username and password required')",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a7de1ba5-ed44-42af-b59b-d5c1884f3e50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"emmajpass\",\n    \"expiresInMins\": 60 // optional, defaults to 60\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "attempting to login with no password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "478134b5-3a8b-417b-b58b-07460c1c6e6e",
								"exec": [
									"pm.environment.set(\"baseUrl\", \"https://dummyjson.com\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ec7af87-4e25-47ae-8048-084f79d93ad9",
								"exec": [
									"pm.test(\"Status code is 400\", function(){",
									"    pm.response.to.have.status(400)",
									"    pm.response.to.have.status(\"Bad Request\")",
									"})",
									"",
									"pm.test(\"Login with no password\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.message).to.eq('Username and password required')",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fef46343-f85c-455b-afee-3d18a32a02ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"emmaj\",\n    \"password\": \"\",\n    \"expiresInMins\": 60 // optional, defaults to 60\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login with invalid username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "739eb1a3-b391-405a-8528-6da70d314e8d",
								"exec": [
									"pm.environment.set(\"baseUrl\", \"https://dummyjson.com\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73ba5679-a266-4c44-b5ee-4fd775261a29",
								"exec": [
									"pm.test(\"Status code is 400\", function(){",
									"    pm.response.to.have.status(400)",
									"    pm.response.to.have.status(\"Bad Request\")",
									"})",
									"",
									"pm.test(\"Invalid username\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.message).to.eq('Invalid credentials')",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ae02f2eb-ed2f-4957-96c1-08974e94c9de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"emma\",\n    \"password\": \"emmajpass\",\n    \"expiresInMins\": 60 // optional, defaults to 60\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login with invalid password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6b4c8835-d86f-44a5-b2df-0c2254e3ec0f",
								"exec": [
									"pm.environment.set(\"baseUrl\", \"https://dummyjson.com\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b5409d7-6247-452b-a7a8-adf437047ba3",
								"exec": [
									"pm.test(\"Status code is 400\", function(){",
									"    pm.response.to.have.status(400)",
									"    pm.response.to.have.status(\"Bad Request\")",
									"})",
									"",
									"pm.test(\"Invalid password\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.message).to.eq('Invalid credentials')",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f1861450-2314-44f8-8d4e-924eaf08b1cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"emmaj\",\n    \"password\": \"emma\",\n    \"expiresInMins\": 60 // optional, defaults to 60\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login with invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "89c227e4-adc3-4ffb-98f5-dbcbf2d9666a",
								"exec": [
									"pm.environment.set(\"baseUrl\", \"https://dummyjson.com\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0c416d9-6757-4fd4-97a5-28a843a1c2fb",
								"exec": [
									"pm.test(\"Status code is 400\", function(){",
									"    pm.response.to.have.status(400)",
									"    pm.response.to.have.status(\"Bad Request\")",
									"})",
									"",
									"pm.test(\"Invalid credentials\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.message).to.eq('Invalid credentials')",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "59021981-4406-47c4-83f0-a1ad96f56823",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"emma\",\n    \"password\": \"emma\",\n    \"expiresInMins\": 60 // optional, defaults to 60\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72ec80a0-b31c-4f05-a237-535bd8f30383",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"    pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"User details\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody.firstName).to.eq(\"Emma\")",
									"    pm.expect(responseBody.lastName).to.eq(\"Miller\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "de49a3f8-381b-430d-8873-f9fe79cf66c0",
								"exec": [
									"// Get the current access token and token expiry from Postman environment",
									"const accessToken = pm.environment.get(\"accessToken\");",
									"const tokenExpiry = pm.environment.get(\"tokenExpiry\");",
									"",
									"// Check if the access token is missing OR if it has expired",
									"if (!accessToken || Date.now() > tokenExpiry) {",
									"    console.log(\"Token expired or missing. Requesting a new one...\");",
									"",
									"    // Send a request to the login API endpoint to obtain a new access token",
									"    pm.sendRequest({",
									"        url: 'https://dummyjson.com/auth/login', ",
									"        method: 'POST', ",
									"        header: {",
									"            'Content-Type': 'application/json'  ",
									"        },",
									"        body: {",
									"            mode: 'raw', ",
									"            raw: JSON.stringify({",
									"                username: 'your-username', ",
									"                password: 'your-password' ",
									"            })",
									"        }",
									"    }, function (err, response) {",
									"        // This callback function runs after the login request completes",
									"        if (err) {",
									"            console.error('Error during token request', err);",
									"            return; // Stop further execution if an error occurs",
									"        }",
									"",
									"        // Parse the JSON response from the server",
									"        const responseJson = response.json();",
									"",
									"        // Extract the access token from the response (modify if the key name is different)",
									"        const newAccessToken = responseJson.access_token;",
									"",
									"        const expiresIn = 900; // The token expires in 15 mins",
									"        ",
									"        // Calculate the new expiration time in milliseconds",
									"        const newExpiryTime = Date.now() + (expiresIn * 1000); // Current time + 900 seconds",
									"",
									"        // Store the access token and its expiration time in the environment variables",
									"        pm.environment.set(\"accessToken\", newAccessToken);",
									"        pm.environment.set(\"tokenExpiry\", newExpiryTime);",
									"    }); ",
									"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9912e7f9-d7ae-4f73-abcb-c2a297afe0f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/auth/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"id": "b8b69f45-cc0d-4267-b5b2-6f8bb8453a25"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "invalid url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 404\", function(){",
									"    pm.response.to.have.status(404)",
									"     pm.response.to.have.status(\"Not Found\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "eabce384-653b-464e-8b83-ac64b7763c11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/use",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"use"
							]
						}
					},
					"response": []
				},
				{
					"name": "50 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"Response body contains 50 users\", function(){",
									"    const responseBody = pm.response.json()",
									"    pm.expect(responseBody).to.have.property(\"limit\")",
									"    pm.expect(responseBody.limit).to.eq(50)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1062eaec-6195-4c51-8744-d19969672b06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users?limit=50",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 404\", function(){",
									"    pm.response.to.have.status(404)",
									"     pm.response.to.have.status(\"Not Found\")",
									"})",
									"pm.test(\"Invalid user id\", function () {",
									"    const responseBody = pm.response.json();",
									"    const userId = pm.variables.get(\"userId\"); // Fetch the dynamic user ID",
									"    pm.expect(responseBody.message).to.eq(`User with id '${userId}' not found`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27d75b81-b22e-40ac-bede-16e8c67515fa",
								"exec": [
									"pm.variables.set(\"userId\", 303); // Replace with the desired ID",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1ea86a09-75e7-43af-9798-21c0bb4f1690",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"pm.test(\"Invalid user id\", function () {",
									"    const responseBody = pm.response.json();",
									"    const userId = pm.variables.get(\"userId\"); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27d75b81-b22e-40ac-bede-16e8c67515fa",
								"exec": [
									"pm.variables.set(\"userId\", 5); // Replace with the desired ID",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e45c622c-b255-4b69-9a3c-89f310cfaeeb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"pm.test(\"Invalid search\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.users).to.be.an(\"array\").that.is.empty;",
									"    pm.expect(responseBody.total).to.eq(0)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27d75b81-b22e-40ac-bede-16e8c67515fa",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "734874ea-e85e-4a01-8da7-10ae5b4a0f72",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/search?q=Moji",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Moji"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search for a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"pm.test(\"Search for a user\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include('Smith');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27d75b81-b22e-40ac-bede-16e8c67515fa",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "65aff7a2-57a7-4cc9-8982-1b0638799d6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/search?q=Smith",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Smith"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter users by hair color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"pm.test(\"Filter users by hair color\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.users).to.be.an(\"array\");",
									"",
									"    // Check every user's hair color ",
									"    const color = pm.variables.get(\"color\"); ",
									"    responseBody.users.forEach(user => {",
									"        pm.expect(user.hair.color).to.eq(color);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27d75b81-b22e-40ac-bede-16e8c67515fa",
								"exec": [
									"pm.variables.set(\"color\", \"Red\"); // Replace with the desired color"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7a9722f2-3a9c-49cc-ab4c-67b90ddc7acd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/filter?key=hair.color&value={{color}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"filter"
							],
							"query": [
								{
									"key": "key",
									"value": "hair.color"
								},
								{
									"key": "value",
									"value": "{{color}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter users by roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fbe6191-ee47-40e6-9f22-0c0be2b32cfd",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"pm.test(\"Filter users by roles\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.users).to.be.an(\"array\");",
									"    const role = pm.variables.get(\"role\"); ",
									"     responseBody.users.forEach(user => {",
									"        pm.expect(user.role).to.eq(role);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27d75b81-b22e-40ac-bede-16e8c67515fa",
								"exec": [
									"pm.variables.set(\"role\", \"admin\"); // Replace with the desired role"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7dd8a7bb-ca0f-4e2e-a5d4-ae1c38c5b1b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/filter?key=role&value={{role}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"filter"
							],
							"query": [
								{
									"key": "key",
									"value": "role"
								},
								{
									"key": "value",
									"value": "{{role}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "limit and skip users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b001862b-837c-4673-8f75-f4cfcb8c8d1b",
								"exec": [
									"const variables = {",
									"    limit: 5,",
									"    skip: 20",
									"};",
									"",
									"Object.entries(variables).forEach(([key, value]) => {",
									"    pm.variables.set(key, value);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a227f7c3-bc70-461e-9b5a-6a4089e09df7",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"Limit and skip users\", function () {",
									"    const responseBody = pm.response.json();",
									"    ",
									"    const variables = {",
									"        limit: pm.variables.get(\"limit\"),",
									"        skip: pm.variables.get(\"skip\")",
									"    };",
									"",
									"    Object.entries(variables).forEach(([key, value]) => {",
									"        pm.expect(responseBody[key]).to.eq(value);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "458d8f4a-b156-4c21-b22e-84f749a43ee0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users?limit={{limit}}&skip={{skip}}&select=firstName,age",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "skip",
									"value": "{{skip}}"
								},
								{
									"key": "select",
									"value": "firstName,age"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sort users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "626a6e09-7f66-4a9d-826c-ddfe2e7f69b3",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34c465b0-eb10-493d-a618-7295da56a664",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users?sortBy=firstName&order=asc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "firstName"
								},
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user's cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "626a6e09-7f66-4a9d-826c-ddfe2e7f69b3",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "750e6b37-c20f-4d4d-9756-6d57b77f7912",
								"exec": [
									"pm.variables.set(\"userId\", 6);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a8ab9e8e-1e1f-4b8c-9464-f04e8513fb0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}/carts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "user's posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d70a6768-6462-4d31-bbad-16de5fa439b9",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83bf84ed-f137-402a-af33-7fe22874c690",
								"exec": [
									"pm.variables.set(\"userId\", 6);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "53fc1f60-b870-4cc0-a520-55fdd763eca0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "user's todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54a0f182-6913-4b9c-bf6e-ab1fe8395651",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c92c8648-ff88-485f-9ae6-e50acf00ab35",
								"exec": [
									"pm.variables.set(\"userId\", 6);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d0e4e0ac-02a9-4d00-a72a-0dc0561235ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}/todos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "add new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac235b19-d411-4fc7-b5e3-d6cd2df22df7",
								"exec": [
									"pm.test(\"Status code is 201\", function(){",
									"    pm.response.to.have.status(201)",
									"    pm.response.to.have.status(\"Created\")",
									"})",
									"",
									"pm.test(\"User is added successfully\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\"); ",
									"    pm.expect(responseBody).to.have.property(\"firstName\", \"Test\"); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e3d2812c-0e84-4409-b5d5-4727fa94d554",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"age\": 24,\n    \"gender\": \"Female\",\n    \"email\": \"testuser@gmail.com\",\n    \"username\":\"tester\",\n    \"password\": \"Testing123\",\n    \"birthDate\": \"April 29th\",\n    \"hair\":{\n        \"color\": \"black\",\n        \"type\": \"straight\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/add",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57bd60a-c7d5-485f-b235-977e66a023a9",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"    pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"User's details is updated successfully\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.id).to.eq(2); ",
									"    pm.expect(responseBody.hair.color).to.eq(\"Brown\"); ",
									"    pm.expect(responseBody.hair.type).to.eq(\"Curly\"); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c3f0a5c1-f7ea-422d-bb7f-6bdd56d23777",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"hair\": {\n        \"color\": \"Brown\",\n        \"type\": \"Curly\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/2",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"id": "25c44e45-c4da-4083-a70c-a46ec65e91af"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2a55067-f4e4-45ed-94c7-822e02eb7df9",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "52df236b-38c1-41e2-a483-0131a18069f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "all products (invalid url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2a55067-f4e4-45ed-94c7-822e02eb7df9",
								"exec": [
									"pm.test(\"Status code is 404\", function(){",
									"    pm.response.to.have.status(404)",
									"     pm.response.to.have.status(\"Not Found\")",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c316548b-10be-44df-b0f8-4085e1962446",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/prod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"prod"
							]
						}
					},
					"response": []
				},
				{
					"name": "a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2a55067-f4e4-45ed-94c7-822e02eb7df9",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"Product details\", function(){",
									"    const productId = pm.variables.get(\"productID\")",
									"    pm.expect(pm.response.json().id).to.eq(productId)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0ad74ba9-ab7f-4a51-9688-4e5d4465d587",
								"exec": [
									"pm.variables.set(\"productID\", 5)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9472f3f7-5975-43a5-86b6-4fe692c30111",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/product/{{productID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"product",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search for a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2a55067-f4e4-45ed-94c7-822e02eb7df9",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"     pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"Product details\", function(){",
									"    const item = pm.variables.get(\"item\")",
									"    pm.expect(pm.response.text()).to.include(item)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0ad74ba9-ab7f-4a51-9688-4e5d4465d587",
								"exec": [
									"pm.variables.set(\"item\", \"phone\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "19c3d626-ef16-4a58-bddc-573cbbe740e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/product/search?q={{item}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"product",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{item}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "limit and skip product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ecc20714-c081-438b-956c-ce4ec4c0824a",
								"exec": [
									"const variables = {",
									"    limit: 10,",
									"    skip: 20",
									"};",
									"",
									"Object.entries(variables).forEach(([key, value]) => {",
									"    pm.variables.set(key, value);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1caa9867-565a-4006-9ea0-a0b1253171cc",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Limit and skip products\", function () {",
									"    const responseBody = pm.response.json();",
									"    const variables = {",
									"        limit: pm.variables.get(\"limit\"),",
									"        skip: pm.variables.get(\"skip\")",
									"    };",
									"",
									"    Object.entries(variables).forEach(([key, value]) => {",
									"        pm.expect(responseBody[key]).to.eq(value);",
									"    });",
									"",
									"    responseBody.products.forEach(product => {",
									"        pm.expect(product).to.include.keys('title', 'category');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bc656b86-1259-4712-bc0b-ee5f277ac755",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?limit={{limit}}&skip={{skip}}&select=title,category",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "skip",
									"value": "{{skip}}"
								},
								{
									"key": "select",
									"value": "title,category"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sort products by ascending order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af1a9708-abf8-4343-95cb-e7a1e2a0479d",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is sorted in ascending order\", function () {",
									"    const responseBody = pm.response.json();",
									"    const fieldToSort = \"title\";",
									"",
									"    // Extract the values of the field to sort",
									"    const values = responseBody.products.map(product => product[fieldToSort]);",
									"",
									"    // Check if the array is sorted in ascending order",
									"    const isSorted = values.every((value, index, array) => {",
									"        return index === 0 || array[index - 1] <= value;",
									"    });",
									"",
									"    // Assert that the array is sorted",
									"    pm.expect(isSorted).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c0dd21fa-7557-4715-adb0-edbebb6f857b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/product?sortBy=title&order=asc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "title"
								},
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sort products by descending order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af1a9708-abf8-4343-95cb-e7a1e2a0479d",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is sorted in descending order\", function () {",
									"    const responseBody = pm.response.json();",
									"    const fieldToSort = \"title\";",
									"",
									"    // Extract the values of the field to sort",
									"    const values = responseBody.products.map(product => product[fieldToSort]);",
									"",
									"    // Check if the array is sorted in ascending order",
									"    const isSorted = values.every((value, index, array) => {",
									"        return index === 0 || array[index - 1] <= value;",
									"    });",
									"",
									"    // Assert that the array is sorted",
									"    pm.expect(isSorted).to.be.false;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "75b19f10-188d-49e5-af24-16776c74a06d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/product?sortBy=title&order=desc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "title"
								},
								{
									"key": "order",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "b3d16cfb-4dbf-40da-88d8-790b99f686df"
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "retrieve all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c81658e-4841-4420-85f6-95b439a2dfea",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e73ec0a8-fe4c-4d5f-b773-a2a062f1caa7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve a post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4834b1bc-8989-4939-a7c3-67873c60fbf6",
								"exec": [
									"pm.variables.set(\"postID\", 8)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a6928e0-16c5-4336-8707-eba8e2d10733",
								"exec": [
									"pm.test(\"Status code\", function(){",
									"    pm.response.to.have.status(200)",
									"    pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"Post details\", function(){",
									"    const postID = pm.variables.get(\"postID\")",
									"    pm.expect(pm.response.json().id).to.eq(postID)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1828cd73-59a2-4657-a310-ca5bdb65ae52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/post/{{postID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"post",
								"{{postID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search for a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c81658e-4841-4420-85f6-95b439a2dfea",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2ce7bfd0-5818-438e-98a4-d7d9f3cac6a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts/search?q=love",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "love"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "limit a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c81658e-4841-4420-85f6-95b439a2dfea",
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Posts\", function(){",
									"    const responseBody = pm.response.json()",
									"    const limitNo = pm.variables.get(\"limitNo\")",
									"    const skipNo = pm.variables.get(\"skipNo\")",
									"    pm.expect(responseBody.limit).to.eq(limitNo)",
									"    pm.expect(responseBody.skip).to.eq(skipNo)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92ea377f-027d-45f7-a40f-2b4d4b7c1daa",
								"exec": [
									"const variables = {",
									"    limitNo: 6,",
									"    skipNo: 20",
									"};",
									"",
									"Object.entries(variables).forEach(([key, value]) => {",
									"    pm.variables.set(key, value);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "316dd31c-75d2-4b2c-ad62-4f467ac5475b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts?limit={{limitNo}}&skip={{skipNo}}&select=title,reactions,userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limitNo}}"
								},
								{
									"key": "skip",
									"value": "{{skipNo}}"
								},
								{
									"key": "select",
									"value": "title,reactions,userId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve a post by user id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c69f5b1-488d-4f5e-84e5-9d64cb26112b",
								"exec": [
									"pm.variables.set(\"userID\", 30)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "670fcf45-2cde-4c76-bfb2-0da661651d2f",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Retrieve a user's posts\", function() {",
									"    const responseBody = pm.response.json();",
									"    const user = pm.variables.get(\"userID\");",
									"    responseBody.posts.forEach(post => {",
									"        pm.expect(post.userId).to.eql(user);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1d1b8e0c-38a6-4169-88b4-edded298a4cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts/user/{{userID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"user",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add a new post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18842678-c243-4a0c-b394-674af934a941",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bd05854d-01d9-492a-afd2-4d025da0e1b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"API Testing\",\n    \"body\": \"I am testing DummyJSON using Postman\",\n    \"userId\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts/add",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18842678-c243-4a0c-b394-674af934a941",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f2d5d275-d23c-4696-8c96-acc0cb311f2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"I am testing DummyJSON with Postman and I am adding test scripts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts/30",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"30"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a post",
					"id": "76378da3-0a90-4c01-a299-e73bbcc44a50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts/3",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"id": "94f0a004-a674-4ca9-8d3e-33c5ca4235c5"
		}
	]
}